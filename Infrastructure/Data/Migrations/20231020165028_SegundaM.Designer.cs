// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(RopaContext))]
    [Migration("20231020165028_SegundaM")]
    partial class SegundaM
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SuledoBase")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("cargo", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaRegistro")
                        .HasColumnType("date");

                    b.Property<int>("IdCliente")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("IdMunicipioFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPersonaFk")
                        .HasColumnType("int");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente")
                        .IsUnique();

                    b.HasIndex("IdMunicipioFK");

                    b.HasIndex("IdTipoPersonaFk");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("color", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPaisFk")
                        .HasColumnType("int");

                    b.Property<string>("NombreDepartamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdPaisFk");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.DetalleOrden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadProducida")
                        .HasColumnType("int");

                    b.Property<int>("CantidadProducir")
                        .HasColumnType("int");

                    b.Property<int>("IdColorFk")
                        .HasColumnType("int");

                    b.Property<int>("IdEstadoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdOrdenFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPrendaFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdColorFk");

                    b.HasIndex("IdEstadoFk");

                    b.HasIndex("IdOrdenFk");

                    b.HasIndex("IdPrendaFk");

                    b.ToTable("detalleorden", (string)null);
                });

            modelBuilder.Entity("Core.Entities.DetalleVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdInventarioFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTallaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdVentaFk")
                        .HasColumnType("int");

                    b.Property<double>("ValorUnit")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("IdInventarioFk");

                    b.HasIndex("IdTallaFk");

                    b.HasIndex("IdVentaFk");

                    b.ToTable("detalleventa", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaIngreso")
                        .HasColumnType("date");

                    b.Property<int>("IdCargoFK")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int");

                    b.Property<int>("IdMunicipioFK")
                        .HasColumnType("int");

                    b.Property<string>("NombreEmpleado")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("IdCargoFK");

                    b.HasIndex("IdEmpleado")
                        .IsUnique();

                    b.HasIndex("IdMunicipioFK");

                    b.ToTable("empleado", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<int>("IdMunicipioFk")
                        .HasColumnType("int");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RepresentanteLegal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdMunicipioFk");

                    b.HasIndex("Nit")
                        .IsUnique();

                    b.ToTable("empresa", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdTipoEstado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoEstado");

                    b.ToTable("estado", (string)null);
                });

            modelBuilder.Entity("Core.Entities.FormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("formapago", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("genero", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreInsumo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StockMax")
                        .HasColumnType("int");

                    b.Property<int>("StockMin")
                        .HasColumnType("int");

                    b.Property<double>("ValorUnit")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("NombreInsumo")
                        .IsUnique();

                    b.ToTable("insumo", (string)null);
                });

            modelBuilder.Entity("Core.Entities.InsumoPrenda", b =>
                {
                    b.Property<int>("IdInsumoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPrendaFk")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.HasKey("IdInsumoFk", "IdPrendaFk");

                    b.HasIndex("IdPrendaFk");

                    b.ToTable("insumoprenda", (string)null);
                });

            modelBuilder.Entity("Core.Entities.InsumoProveedor", b =>
                {
                    b.Property<int>("IdInsumoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.HasKey("IdInsumoFk", "IdProveedor");

                    b.HasIndex("IdProveedor");

                    b.ToTable("insumoproveedor", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodInv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdPrendaFk")
                        .HasColumnType("int");

                    b.Property<double>("ValorVtaCop")
                        .HasColumnType("double");

                    b.Property<double>("ValorVtaUsd")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CodInv")
                        .IsUnique();

                    b.HasIndex("IdPrendaFk");

                    b.ToTable("inventario", (string)null);
                });

            modelBuilder.Entity("Core.Entities.InventarioTalla", b =>
                {
                    b.Property<int>("IdInvetarioFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTallaFK")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.HasKey("IdInvetarioFk", "IdTallaFK");

                    b.HasIndex("IdTallaFK");

                    b.ToTable("inventariotalla", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdDepartamentoFk")
                        .HasColumnType("int");

                    b.Property<string>("NombreMunicipio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamentoFk");

                    b.ToTable("municipio", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Orden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdClienteFk")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpleadoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdEstadoFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdClienteFk");

                    b.HasIndex("IdEmpleadoFk");

                    b.HasIndex("IdEstadoFk");

                    b.ToTable("orden", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombrePais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Prenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdEstadoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdGeneroFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPrenda")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoProteccion")
                        .HasColumnType("int");

                    b.Property<string>("NombrePrenda")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("ValorUnitCop")
                        .HasColumnType("double");

                    b.Property<double>("ValorUnitUsd")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("IdEstadoFk");

                    b.HasIndex("IdGeneroFk");

                    b.HasIndex("IdPrenda")
                        .IsUnique();

                    b.HasIndex("IdTipoProteccion");

                    b.ToTable("prenda", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdMunicipioFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPersonaFK")
                        .HasColumnType("int");

                    b.Property<string>("NitProveedor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreProveedor")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("IdMunicipioFk");

                    b.HasIndex("IdTipoPersonaFK");

                    b.HasIndex("NitProveedor")
                        .IsUnique();

                    b.ToTable("proveedor", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Talla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("Descripcion")
                        .IsUnique();

                    b.ToTable("talla", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tipoestado", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreTipoPersona")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tipopersona", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoProteccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tipoproteccion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FechaVenta")
                        .HasColumnType("date");

                    b.Property<int?>("FormaPagoId")
                        .HasColumnType("int");

                    b.Property<int>("IdClienteFk")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpleadoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdFormaPagoFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("IdClienteFk");

                    b.HasIndex("IdEmpleadoFk");

                    b.ToTable("venta", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Cliente", b =>
                {
                    b.HasOne("Core.Entities.Municipio", "Municipios")
                        .WithMany("Clientes")
                        .HasForeignKey("IdMunicipioFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoPersona", "TipoPersonas")
                        .WithMany("Clientes")
                        .HasForeignKey("IdTipoPersonaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipios");

                    b.Navigation("TipoPersonas");
                });

            modelBuilder.Entity("Core.Entities.Departamento", b =>
                {
                    b.HasOne("Core.Entities.Pais", "Paises")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdPaisFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paises");
                });

            modelBuilder.Entity("Core.Entities.DetalleOrden", b =>
                {
                    b.HasOne("Core.Entities.Color", "Colores")
                        .WithMany("DetalleOrdenes")
                        .HasForeignKey("IdColorFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Estado", "Estados")
                        .WithMany("DetalleOrdenes")
                        .HasForeignKey("IdEstadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Orden", "Ordenes")
                        .WithMany("DetalleOrdenes")
                        .HasForeignKey("IdOrdenFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Prenda", "Prendas")
                        .WithMany("DetalleOrdenes")
                        .HasForeignKey("IdPrendaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colores");

                    b.Navigation("Estados");

                    b.Navigation("Ordenes");

                    b.Navigation("Prendas");
                });

            modelBuilder.Entity("Core.Entities.DetalleVenta", b =>
                {
                    b.HasOne("Core.Entities.Inventario", "Inventarios")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("IdInventarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Talla", "Tallas")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("IdTallaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Venta", "Ventas")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("IdVentaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventarios");

                    b.Navigation("Tallas");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Core.Entities.Empleado", b =>
                {
                    b.HasOne("Core.Entities.Cargo", "Cargos")
                        .WithMany("Empleados")
                        .HasForeignKey("IdCargoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Municipio", "Municipios")
                        .WithMany("Empleados")
                        .HasForeignKey("IdMunicipioFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargos");

                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Core.Entities.Empresa", b =>
                {
                    b.HasOne("Core.Entities.Municipio", "Municipios")
                        .WithMany("Empresas")
                        .HasForeignKey("IdMunicipioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Core.Entities.Estado", b =>
                {
                    b.HasOne("Core.Entities.TipoEstado", "TipoEstados")
                        .WithMany("Estados")
                        .HasForeignKey("IdTipoEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoEstados");
                });

            modelBuilder.Entity("Core.Entities.InsumoPrenda", b =>
                {
                    b.HasOne("Core.Entities.Insumo", "Insumos")
                        .WithMany("InsumoPrendas")
                        .HasForeignKey("IdInsumoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Prenda", "Prendas")
                        .WithMany("InsumoPrendas")
                        .HasForeignKey("IdPrendaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insumos");

                    b.Navigation("Prendas");
                });

            modelBuilder.Entity("Core.Entities.InsumoProveedor", b =>
                {
                    b.HasOne("Core.Entities.Insumo", "Insumos")
                        .WithMany("InsumoProveedores")
                        .HasForeignKey("IdInsumoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Proveedor", "Proveedores")
                        .WithMany("InsumoProveedores")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insumos");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Core.Entities.Inventario", b =>
                {
                    b.HasOne("Core.Entities.Prenda", "Prendas")
                        .WithMany("Inventarios")
                        .HasForeignKey("IdPrendaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prendas");
                });

            modelBuilder.Entity("Core.Entities.InventarioTalla", b =>
                {
                    b.HasOne("Core.Entities.Inventario", "Inventarios")
                        .WithMany("InventarioTallas")
                        .HasForeignKey("IdInvetarioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Talla", "Tallas")
                        .WithMany("InventarioTallas")
                        .HasForeignKey("IdTallaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventarios");

                    b.Navigation("Tallas");
                });

            modelBuilder.Entity("Core.Entities.Municipio", b =>
                {
                    b.HasOne("Core.Entities.Departamento", "Departamentos")
                        .WithMany("Municipios")
                        .HasForeignKey("IdDepartamentoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Core.Entities.Orden", b =>
                {
                    b.HasOne("Core.Entities.Cliente", "Clientes")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdClienteFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Empleado", "Empleados")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdEmpleadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Estado", "Estados")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdEstadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("Estados");
                });

            modelBuilder.Entity("Core.Entities.Prenda", b =>
                {
                    b.HasOne("Core.Entities.Estado", "Estados")
                        .WithMany("Prendas")
                        .HasForeignKey("IdEstadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Genero", "Generos")
                        .WithMany("Prendas")
                        .HasForeignKey("IdGeneroFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoProteccion", "TipoProtecciones")
                        .WithMany("Prendas")
                        .HasForeignKey("IdTipoProteccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estados");

                    b.Navigation("Generos");

                    b.Navigation("TipoProtecciones");
                });

            modelBuilder.Entity("Core.Entities.Proveedor", b =>
                {
                    b.HasOne("Core.Entities.Municipio", "Municipios")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdMunicipioFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoPersona", "TipoPersonas")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdTipoPersonaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipios");

                    b.Navigation("TipoPersonas");
                });

            modelBuilder.Entity("Core.Entities.Venta", b =>
                {
                    b.HasOne("Core.Entities.FormaPago", "FormaPago")
                        .WithMany("Ventas")
                        .HasForeignKey("FormaPagoId");

                    b.HasOne("Core.Entities.Cliente", "Clientes")
                        .WithMany("Ventas")
                        .HasForeignKey("IdClienteFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Empleado", "Empleados")
                        .WithMany("Ventas")
                        .HasForeignKey("IdEmpleadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("FormaPago");
                });

            modelBuilder.Entity("Core.Entities.Cargo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Core.Entities.Cliente", b =>
                {
                    b.Navigation("Ordenes");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Core.Entities.Color", b =>
                {
                    b.Navigation("DetalleOrdenes");
                });

            modelBuilder.Entity("Core.Entities.Departamento", b =>
                {
                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Core.Entities.Empleado", b =>
                {
                    b.Navigation("Ordenes");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Core.Entities.Estado", b =>
                {
                    b.Navigation("DetalleOrdenes");

                    b.Navigation("Ordenes");

                    b.Navigation("Prendas");
                });

            modelBuilder.Entity("Core.Entities.FormaPago", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Core.Entities.Genero", b =>
                {
                    b.Navigation("Prendas");
                });

            modelBuilder.Entity("Core.Entities.Insumo", b =>
                {
                    b.Navigation("InsumoPrendas");

                    b.Navigation("InsumoProveedores");
                });

            modelBuilder.Entity("Core.Entities.Inventario", b =>
                {
                    b.Navigation("DetalleVentas");

                    b.Navigation("InventarioTallas");
                });

            modelBuilder.Entity("Core.Entities.Municipio", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("Empresas");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Core.Entities.Orden", b =>
                {
                    b.Navigation("DetalleOrdenes");
                });

            modelBuilder.Entity("Core.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Core.Entities.Prenda", b =>
                {
                    b.Navigation("DetalleOrdenes");

                    b.Navigation("InsumoPrendas");

                    b.Navigation("Inventarios");
                });

            modelBuilder.Entity("Core.Entities.Proveedor", b =>
                {
                    b.Navigation("InsumoProveedores");
                });

            modelBuilder.Entity("Core.Entities.Talla", b =>
                {
                    b.Navigation("DetalleVentas");

                    b.Navigation("InventarioTallas");
                });

            modelBuilder.Entity("Core.Entities.TipoEstado", b =>
                {
                    b.Navigation("Estados");
                });

            modelBuilder.Entity("Core.Entities.TipoPersona", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Core.Entities.TipoProteccion", b =>
                {
                    b.Navigation("Prendas");
                });

            modelBuilder.Entity("Core.Entities.Venta", b =>
                {
                    b.Navigation("DetalleVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
